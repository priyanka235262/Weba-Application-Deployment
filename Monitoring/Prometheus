#Prometheus Configuration:

Prometheus configuration is primarily done through a manifest YAML file called prometheus.yaml.This file defines how prometheus scrapes metrices,where to store data,alerting rules,and other settings.
Here's a breakdown of the files:
global: global settings that apply to all other configurations
 scrape_interval: How often Prometheus scrapes metrics from targets (default: 15s).
 evaluation_interval: How often Prometheus evaluates rules (default: 15s).
 external_labels: Labels to add to all metrics scraped by Prometheus

rule_files: A list of files containing alerting and recording rules.
scrape_configs: A list of scrape configurations, each defining how to scrape metrics from a set of targets.

job_name: A descriptive name for the scrape job.
static_configs: Defines a static list of targets.
targets: A list of target addresses in the format <host>:<port>.
labels: Labels to add to metrics scraped from these targets.
dns_sd_configs: Defines how to discover targets using DNS service discovery.
kubernetes_sd_configs: Defines how to discover targets running in Kubernetes.
relabel_configs: Allows you to modify labels before they are stored by Prometheus.
alerting: Configuration for the Alertmanager, which handles alerts generated by Prometheus.
alertmanagers: A list of Alertmanager instances.
remote_write: Configures remote storage for metrics.
remote_read: Configures reading metrics from remote storage.

Key Concepts and Further Configuration:

Service Discovery: Prometheus supports various service discovery mechanisms (static, DNS, Kubernetes, Consul, etc.). Kubernetes service discovery is particularly important for containerized environments.
Relabeling: Relabeling is a powerful feature that allows you to modify, add, or remove labels before metrics are stored. This is essential for cleaning up metrics and adding context.
Alerting Rules: Alerting rules define conditions that trigger alerts. These rules are defined in separate YAML files referenced in the rule_files section.
Recording Rules: Recording rules pre-compute frequently used expressions and store the results as new time series. This can improve query performance.
Remote Storage: Prometheus can be configured to write metrics to remote storage systems like Thanos, Cortex, or VictoriaMetrics for long-term storage and global querying.
